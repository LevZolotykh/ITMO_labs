import time
import wikipedia
import pypandoc

start_time = time.time()


def fib(n):
    v = []
    ans = ''
    a_1 = 1
    a_2 = 1
    v.append(a_1)
    v.append(a_2)
    for i in range(1, n):
        v.append(v[i] + v[i - 1])
    for j in range(len(v)):
        ans += str(v[j])
    return ans


def naive(s):
    ans = [0] * 90
    for i in range(len(s) - 1):
        num = int(s[i] + s[i + 1])
        if num >= 10:
            ans[num - 10] += 1
    return max(ans)

def hash_func():
    hashed = []
    symb = [str(i) for i in range(10)]
    for i in range(10, 100):
        hsh = 0
        string = str(i)
        for j in range(2):
            for k in range(len(symb)):
                if string[j - 1] == symb[k]:
                    hsh += int(symb[k]) * (10 ** j)
        hashed.append(hsh)
    return hashed

def rabin_carp(s):
    ans = [0] * 90
    symbols = [str(i) for i in range(10)]
    all_hash = hash_func()

    for i in range(len(s) - 1):
        hsh = 0
        number = (s[i] + s[i + 1])
        for k in range(2):
            for j in range(len(symbols)):
                if number[k - 1] == symbols[j]:
                    hsh += int(symbols[j]) * (10 ** k)

        for i in range(len(all_hash)):
            if hsh == all_hash[i] and int(number) == (i + 10):
                ans[i] += 1
                break
    return max(ans)


def boier_mur(s):
    ans = [0] * 90
    i = 0
    while i < len(s) - 1:
        if s[i] == '0' and s[i + 1] == '0':
            i += 2
        elif s[i] == '0':
            i += 1
        else:
            number = int(s[i] + s[i + 1])
            ans[number - 10] += 1
            i += 1
    return max(ans)


def knut_morris_pratt(s):
    ans = [0] * 90
    i = 0
    while i != len(s) - 1:
        if s[i] == s[i + 1] and s[i] == '0':
            prefix = 1
            i += prefix
        number = int(s[i] + s[i + 1])
        if 10 <= number <= 99:
            ans[number - 10] += 1
            i += 1
        elif number >= 1:
            prefix = 1
            i += prefix
    return max(ans)



a = fib(500)
# print (len(a))
#print(a)


print(naive(a))
print(rabin_carp(a))
print(boier_mur(a))
print(knut_morris_pratt(a))


def prefix(s):
    p = [0] * len(s)
    j = 0
    i = 1

    while i < len(s):
        if s[j] == s[i]:
            p[i] = j + 1
            i += 1
            j += 1
        else:
            if j == 0:
                p[i] = 0
                i += 1
            else:
                j = p[j - 1]
    return p


def knut_morris_pratt(s, subs):
    ind = []
    subs_pref = prefix(subs)

    j = 0
    for i in range(len(s)):
        while j > 0 and s[i] != subs[j]:
            j = subs_pref[j - 1]
        if s[i] == subs[j]: j += 1
        if j == len(subs):
            ind.append(i - (j - 1))
            j = subs_pref[j - 1]

    return ind

wikipedia.set_lang("ru")

origin = wikipedia.page("Жизнь").content.lower()
text = pypandoc.convert_file('Live.docx', 'plain').lower()
length = len(text)
symbols = ',.-=!:()—[];'

for i in symbols:
    origin = origin.replace(i, '')
    text = text.replace(i, '')
text = text.split()

i = 0
s = 0
while i < len(text) - 2:
    cnt = 0
    fragment = text[i]
    for j in range(i + 1, len(text)):
        fragment += ' ' + text[j]
        if len(knut_morris_pratt(origin, fragment)) > 0:
            cnt += 1
        elif cnt >= 3:
            s += len(fragment)
            i = j
            break
        else:
            i = j
            break

print(round(s / length * 100, 2), "%")
